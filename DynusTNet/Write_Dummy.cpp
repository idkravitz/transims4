//*********************************************************
//	Write_Dummy.cpp - output dummy data files
//*********************************************************

#include "DynusTNet.hpp"

//---------------------------------------------------------
//	Write_Dummy
//---------------------------------------------------------

void DynusTNet::Write_Dummy (void)
{
	int i;
	char *pce_text [] = {
		"   5   6   9 ",
		"   2   4   5   6   8  10  15  20  25 ",
		"   2     ",
		"     0.00     1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5",
		"     0.25     1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5",
		"     0.50     1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5",
		"     0.75     2.0  2.0  2.0  2.0  1.5  1.5  1.5  1.5  1.5",
		"     1.00     2.5  2.5  2.5  2.5  2.0  2.0  2.0  2.0  2.0",
		"     1.50     3.0  3.0  2.5  2.5  2.0  2.0  2.0  2.0  2.0",
		"   3     ",
		"     0.00     1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5",
		"     0.25     2.0  2.0  2.0  2.0  2.0  2.0  1.5  1.5  1.5",
		"     0.50     2.5  2.5  2.0  2.0  2.0  2.0  2.0  2.0  2.0",
		"     0.75     3.0  3.0  2.5  2.5  2.5  2.5  2.0  2.0  2.0",
		"     1.00     3.5  3.5  3.0  3.0  3.0  3.0  2.5  2.5  2.5",
		"     1.50     4.0  3.5  3.0  3.0  3.0  3.0  2.5  2.5  2.5",
		"   4     ",
		"     0.00     1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5  1.5",
		"     0.25     3.0  2.5  2.5  2.5  2.0  2.0  2.0  2.0  2.0",
		"     0.50     3.5  3.0  3.0  3.0  2.5  2.5  2.5  2.5  2.5",
		"     0.75     4.0  3.5  3.5  3.5  3.0  3.0  3.0  3.0  3.0",
		"     1.00     5.0  4.0  4.0  4.0  3.5  3.5  3.0  3.0  3.0",
		"     1.50     5.0  4.0  4.0  4.0  3.5  3.5  3.0  3.0  3.0",
		"   5     ",
		"     0.00     2.0  2.0  1.5  1.5  1.5  1.5  1.5  1.5  1.5",
		"     0.25     4.0  3.0  2.5  2.5  2.0  2.0  2.0  2.0  2.0",
		"     0.33     4.5  4.0  3.5  3.0  2.5  2.5  2.5  2.5  2.5",
		"     0.50     5.0  4.5  4.0  3.5  3.0  3.0  3.0  3.0  3.0",
		"     0.75     5.5  5.0  4.5  4.0  3.5  3.0  3.0  3.0  3.0",
		"     1.00     6.0  5.0  5.0  4.5  3.5  3.5  3.5  3.5  3.5",
		"   6     ",
		"     0.00     4.0  3.0  2.5  2.5  2.5  2.5  2.5  2.0  2.0",
		"     0.25     4.5  4.0  3.5  3.5  3.5  3.0  2.5  2.5  2.5",
		"     0.33     5.0  4.5  4.0  4.0  3.5  3.0  2.5  2.5  2.5",
		"     0.50     5.5  5.0  4.5  4.5  4.0  3.5  3.0  3.0  3.0",
		"     0.75     6.0  5.5  5.0  5.0  4.5  4.0  3.5  3.5  3.5",
		"     1.00     7.0  6.0  5.5  5.5  5.0  4.5  4.0  4.0  4.0",
		"",
		"",
		"",
		"#ofGrades   DetailedGrade   Truck%",
		"Truck %",
		"Grade(%) Length(ml)               TRUCK  PCE",
		"grade ",
		"",
		"HCM 1998 Table 3-3",
		NULL
	};

	char *left_text [] = {
		"      200  300  400  500  600  800 1000",
		"g/c=0.3",
		"1     135   71   60   30   30   30   30",
		"2     177  126   92   60   60   60   30",
		"3     189  143  114   83   72   60   60",
		"g/c=0.4",
		"1     223  159   94   62   30   30   30",
		"2     270  219  168  134   84   60   60",
		"3     282  236  191  162  118   95   73",
		"g/c=0.5",
		"1     317  252  183  121   80   30   30",
		"2     353  316  256  218  175   97   63",
		"3     375  330  284  239  210  142  119",
		"g/c=0.6",
		"1     400  335  270  206  142   76   30",
		"2     457  406  355  303  252  183  109",
		"3     468  423  377  332  286  229  166",
		"g/c=0.7",
		"1     487  422  358  294  229  135   30",
		"2     550  499  448  397  346  261  156",
		"3     561  516  470  425  380  307  213",
		"=======left turn capacity w/o bay or signal ============",
		"g/c=0.3",
		"1   1 120   60   31   30   30   30   30",
		"1   2 161  112   79   46   31   16   30",
		"1   3 172  128  101   71   61   41   26",
		"2   1  90   43   21   21   21   21   21",
		"2   2 125   83   57   32   21   11   11",
		"2   3 134   97   74   51   43   28   18",
		"3   1  52   23   12   12   12   12   12",
		"3   2  75   48   32   17   11    6    6",
		"3   3  82   56   42   28   24   15   10",
		"g/c=0.4",
		"1   1 210  147   85   55   30   30   30",
		"1   2 257  206  156  123   75   44   28",
		"1   3 268  223  179  151  108   86   65",
		"2   1 181  123   69   44   30   30   30",
		"2   2 224  177  132  102   61   35   22",
		"2   3 235  193  152  126   89   70   52",
		"3   1 141   93   51   32   30   30   30",
		"3   2 179  138  100   76   44   25   16",
		"3   3 188  151  116   96   66   51   38",
		"4   1  92   59   31   19   19   19   19",
		"4   2 120   90   63   47   27   15   10",
		"4   3 127  100   75   61   41   32   23",
		"g/c=0.5",
		"1   1 300  236  173  110   79   30   30",
		"1   2 352  301  251  200  167   89   57",
		"1   3 363  318  273  228  200  133  111",
		"2   1 273  212  152   95   68   30   30",
		"2   2 323  274  226  178  147   76   48",
		"2   3 334  291  247  205  178  116   96",
		"3   1 235  180  127   77   55   30   30",
		"3   2 282  237  192  149  122   62   39",
		"3   3 293  252  212  173  150   95   78",
		"4   1 189  141   98   59   41   30   30",
		"4   2 230  190  152  116   94   47   29",
		"4   3 239  203  169  136  116   73   59",
		"5   1 134   98   66   39   27   27   27",
		"5   2 167  135  106   79   63   31   19",
		"5   3 174  145  118   93   79   49   39",
		"g/c=0.6",
		"1   1 389  325  261  198  134   70   30",
		"1   2 447  396  345  294  243  175  103",
		"1   3 458  413  368  322  277  220  158",
		"2   1 365  302  241  180  120   62   30",
		"2   2 421  372  322  273  224  159   91",
		"2   3 433  388  344  300  256  201  143",
		"3   1 330  271  213  157  104   52   30",
		"3   2 385  337  289  243  197  138   78",
		"3   3 395  353  310  269  228  177  123",
		"4   1 287  233  181  131   85   43   30",
		"4   2 338  293  249  207  167  115   64",
		"4   3 348  308  269  230  193  148  102",
		"5   1 236  188  144  103   66   33   30",
		"5   2 281  241  203  166  132   90   49",
		"5   3 290  254  219  186  155  117   80",
		"6   1 176  138  104   73   47   23   23",
		"6   2 213  180  150  121   95   64   35",
		"6   3 221  191  163  137  112   84   56",
		"g/c=0.7",
		"1   1 478  414  350  286  222  129   30",
		"1   2 541  490  439  388  337  254  149",
		"1   3 552  507  462  417  371  299  205",
		"2   1 456  393  330  268  206  117   30",
		"2   2 518  468  418  368  318  236  137",
		"2   3 530  485  440  396  351  280  190",
		"3   1 424  363  303  244  186  104   30",
		"3   2 485  436  387  339  291  214  121",
		"3   3 496  452  409  366  323  255  171",
		"4   1 384  326  270  215  162   89   30",
		"4   2 442  395  349  304  259  188  105",
		"4   3 453  411  370  329  289  226  149",
		"5   1 337  283  232  183  136   74   30",
		"5   2 391  347  304  262  222  159   87",
		"5   3 401  361  323  285  249  192  125",
		"6   1 282  234  190  148  109   59   30",
		"6   2 330  291  253  216  181  128   69",
		"6   3 339  304  269  236  204  156  101",
		"7   1 282  234  190  148  109   59   30",
		"7   2 330  291  253  216  181  128   69",
		"7   3 339  304  269  236  204  156  101",
		NULL
	};

	char *out_text [] = {
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"1 10",
		"50",
		NULL
	};

	char *cap2_text [] = {
		"     21      3",
		"      0    899   1027   1090 ",
		"    100    794    886    961 ",
		"    200    699    763    846 ",
		"    300    616    656    744 ",
		"    400    541    564    654 ",
		"    500    476    484    575 ",
		"    600    417    416    505 ",
		"    700    366    357    443 ",
		"    800    320    306    388 ",
		"    900    280    262    340 ",
		"   1000    245    224    298 ",
		"   1100    214    191    260 ",
		"   1200    187    163    228 ",
		"   1300    163    140    199 ",
		"   1400    142    119    174 ",
		"   1500    123    101    152 ",
		"   1600    107     86    132 ",
		"   1700     93     74    115 ",
		"   1800     81     63    100 ",
		"   1900     70     53     87 ",
		"   2000     61     45     76 ",
		"",
		"Flow On Major Approach(vehphpl)	Through  Left Right",
		NULL
	};

	char *cap4_text [] = {
		"  4  3",
		"  0 vehicles    923    878   1091",
		"  1 vehicles    766    735    878",
		"  2 vehicles    621    600    692",
		"  3 vehicles    514    500    563",
		"   	          Through  Left  Right",
		"",
		"all way stop discharge rates (veh/hr/lane) ",
		"The number of vehicles refer to the total number of vehicles at stop signs in other approaches",
		"That is if there is a virtual queue in one approach (other than the approach in question), ",
		"then use the second row of discharge rates.",
		NULL
	};
	char * model_text [] = {
		"4",
		"  1  1",
		"  30  92   6  200 2.73",
		"  2  2",
		"   0   0   6  120 1.25",
		"  3  2",
		"   0   0   6  120 1.25",
		"  4  2",
		"   0   0   6  120 1.25",
		"",
		"",
		"# of Models",
		"Model#, ModelType",
		"Cutoff Vf, V0, Kjam, alpah (for the second regime) (only for type 1)",
		"Blank, blank, V0, Kjam, alpah (only for type 2)",
		NULL
	};

	char *yield_text [] = {
		"   21    3",
		"    0  899 1027 1090 ",
		"  100  794  886  961 ",
		"  200  699  763  846 ",
		"  300  616  656  744 ",
		"  400  541  564  654 ",
		"  500  476  484  575 ",
		"  600  417  416  505 ",
		"  700  366  357  443 ",
		"  800  320  306  388 ",
		"  900  280  262  340 ",
		" 1000  245  224  298 ",
		" 1100  214  191  260 ",
		" 1200  187  163  228 ",
		" 1300  163  140  199 ",
		" 1400  142  119  174 ",
		" 1500  123  101  152 ",
		" 1600  107   86  132 ",
		" 1700   93   74  115 ",
		" 1800   81   63  100 ",
		" 1900   70   53   87 ",
		" 2000   61   45   76 ",
		"",
		"Flow On Major Approach(veh/hr/lane)	Through  Left Right",
		NULL
	};

	//---- bus file ----

	fprintf (bus_file.File (), "0\n");
	bus_file.Close ();

	//---- grade length PCE file ----

	for (i=0; ; i++) {
		if (pce_text [i] == NULL) break;
		fprintf (pce_file.File (), "%s\n", pce_text [i]);
	}
	pce_file.Close ();

	//---- left capacity file ----

	for (i=0; ; i++) {
		if (left_text [i] == NULL) break;
		fprintf (left_file.File (), "%s\n", left_text [i]);
	}
	left_file.Close ();

	//---- output option file ----

	for (i=0; ; i++) {
		if (out_text [i] == NULL) break;
		fprintf (out_file.File (), "%s\n", out_text [i]);
	}
	out_file.Close ();

	//---- ramp file ----

	fprintf (ramp_file.File (), "0   9999\n");
	ramp_file.Close ();

	//---- StopCap2Way file ----

	for (i=0; ; i++) {
		if (cap2_text [i] == NULL) break;
		fprintf (cap2_file.File (), "%s\n", cap2_text [i]);
	}
	cap2_file.Close ();

	//---- StopCap4Way file ----

	for (i=0; ; i++) {
		if (cap4_text [i] == NULL) break;
		fprintf (cap4_file.File (), "%s\n", cap4_text [i]);
	}
	cap4_file.Close ();

	//---- superzone file ----

	fprintf (super_file.File (), "0\n");
	super_file.Close ();

	//---- TrafficFlowModel file ----

	for (i=0; ; i++) {
		if (model_text [i] == NULL) break;
		fprintf (model_file.File (), "%s\n", model_text [i]);
	}
	model_file.Close ();

	//---- vms file ----

	fprintf (vms_file.File (), "0\n");
	vms_file.Close ();

	//---- YieldCap file ----

	for (i=0; ; i++) {
		if (yield_text [i] == NULL) break;
		fprintf (yield_file.File (), "%s\n", yield_text [i]);
	}
	yield_file.Close ();

	//---- zone file ----

	fprintf (zone_file.File (), "0\n");
	zone_file.Close ();

	//---- demand file ----

	fprintf (dem_file.File (), "   0     1\n   0  1000\n");
	dem_file.Close ();

	//---- demand_HOV file ----

	fprintf (hov_file.File (), "0\n");
	hov_file.Close ();

	//---- demand_truck file ----

	fprintf (trk_file.File (), "0\n");
	trk_file.Close ();
}
